{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","userId","classNames","TodoList","todos","map","findUserById","usersFromServer","find","todoWithUser","App","useState","setTodos","setTitle","selectedUserId","setSelectedUserId","isTitleError","setIsTitleError","isUserIdError","setIsUserIdError","onSubmit","event","preventDefault","todosPrev","maxTodoId","Math","max","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42179b0d.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    completed, title, user, userId,\n  } = todo;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo key={userId} user={user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => <TodoInfo key={todo.id} todo={todo} />)}\n  </section>\n);\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction findUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nexport const todoWithUser: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: findUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todoWithUser);\n  const [title, setTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [isUserIdError, setIsUserIdError] = useState(false);\n\n  const handleChangeTitle = (value: string) => {\n    setTitle(value);\n    if (isTitleError) {\n      setIsTitleError(false);\n    }\n  };\n\n  const handleChangeSelectedUser = (value: string) => {\n    setSelectedUserId(value);\n    if (isUserIdError) {\n      setIsUserIdError(false);\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title || !selectedUserId) {\n      setIsTitleError(!title);\n      setIsUserIdError(!selectedUserId);\n\n      return;\n    }\n\n    if (selectedUserId && title) {\n      setTodos((todosPrev) => {\n        const maxTodoId = Math.max(...todosPrev.map(todo => todo.id));\n\n        setTitle('');\n        setSelectedUserId('');\n\n        return [\n          ...todosPrev,\n          {\n            id: maxTodoId + 1,\n            userId: +selectedUserId,\n            title,\n            completed: false,\n            user: findUserById(+selectedUserId),\n          },\n        ];\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"text\">Title: </label>\n          <input\n            data-cy=\"titleInput\"\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={event => handleChangeTitle(event.target.value)}\n          />\n\n          {isTitleError && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            name=\"userSelect\"\n            value={selectedUserId}\n            onChange={event => handleChangeSelectedUser(event.target.value)}\n          >\n            <option value=\"\" disabled>\n              Choose a user\n            </option>\n\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {isUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}